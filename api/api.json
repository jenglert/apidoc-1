{
    "base_url": "http://localhost:9000",
    "name": "Api Doc",
    "description": "Host API documentation for REST services, and facilities design of resource first APIs.",

    "models": {

        "user": {
            "description": "A user is a top level person interacting with the api doc server.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this user." },
                { "name": "email", "type": "string" },
                { "name": "name", "type": "string" },
                { "name": "image_url", "type": "string", "required": false, "description": "Image avatar for this user" }
            ]
        },

        "organization": {
            "description": "An organization is used to group a set of services together.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this organization." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the organization name." },
                { "name": "name", "type": "string", "description": "The name of this organization." }
            ]
        },

        "membership": {
            "description": "A membership represents a user in a specific role to an organization. Memberships cannot be created directly. Instead you first create a membership request, then that request is either accepted or declined.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this membership." },
                { "name": "user", "references": "users.guid" },
                { "name": "organization", "references": "organizations.guid" },
                { "name": "role", "type": "string", "description": "The role this user plays for this organization. Typically member or admin.", "example": "member" }
            ]
        },

        "membership_request": {
            "description": "A membership request represents a user requesting to join an organization with a specificed role (e.g. as a member or an admin). Membership requests can be reviewed by any current admin of the organization who can either accept or decline the request.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this membership request." },
                { "name": "user", "references": "users.guid" },
                { "name": "organization", "references": "organizations.guid" },
                { "name": "role", "type": "string", "description": "The requested role for membership to this organization. Typically member or admin.", "example": "member" }
            ]
        },

        "membership_request_review": {
            "description": "A membership request review allows a user to either accept or decline a membership request.",
            "fields": [
                { "name": "membership_request", "references": "membership_requests.guid" },
                { "name": "action", "type": "string", "description": "'accept' or 'decline'", "example": "accept" }
            ]
        },

        "service": {
            "description": "A service has a name and multiple versions of an API (Interface).",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this service." },
                { "name": "name", "type": "string", "description": "The unique name for this service." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the service name." },
                { "name": "description", "type": "string", "required": false }
            ]
        },

        "version": {
            "description": "Represents a unique version of the service.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this version." },
                { "name": "version", "type": "string", "description": "The tag for this version. Can be anything, but if semver style version number is used, we automatically correctly sort by version number to find latest. Otherwise latest version is considered to be the most recently created.", "example": "1.0.0" },
                { "name": "json", "type": "string", "description": "JSON description of the service." }
            ]
        }
    }

}
